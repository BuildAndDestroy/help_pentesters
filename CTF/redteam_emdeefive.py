#!/usr/bin/python3
"""HackTheBox automation CTF

Can you encrypt fast enough? CTF Challenge. This will get us the flag.
"""

import hashlib
import re

import requests

STATIC_URL = 'http://139.59.190.165:31147/'


def headers() -> dict:
    """Set the headers"""
    headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0",
               "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
               "Accept-Language": "en-US,en;q=0.5",
               "Accept-Encoding": "gzip, deflate",
               "Content-Type": "application/x-www-form-urlencoded",
               "Content-Length": "25",
               "Origin": STATIC_URL,
               "Connection": "close",
               "Referer": STATIC_URL,
               "Cookie": "PHPSESSID=o5jb2upgunb876ovcu846i7lq0",
               "Upgrade-Insecure-Requests": "1"}
    return headers


def get_initial_page() -> str:
    """Return the first requested page"""
    session = requests.Session()
    response = session.get(STATIC_URL)
    session.close()
    return response.text


def post_request(headers, md5_data) -> str:
    """Post the md5sum data and get new data."""
    data = {"hash": md5_data}
    session = requests.Session()
    session.headers.update(headers)
    response = session.post(STATIC_URL, data=data)
    return response.text


def string_from_html(first_page_response) -> str:
    """Grab the string that needs to be converted to md5."""
    search_string = '<h1 align=\'center\'>MD5 encrypt this string</h1><h3 align=\'center\'>(?P<key>\w+)</h3><center><form action="" method="post">'
    search_result = re.search(search_string, first_page_response)
    return search_result.group('key')


def string_from_html_secondary(post_request_data) -> str:
    """On secondary runs with POST, use the new regex"""
    search_string = '<h1 align=\'center\'>MD5 encrypt this string</h1><h3 align=\'center\'>(?P<secondary_key>\w+)</h3><p align=\'center\'>Too slow!</p><center><form action="" method="post">'
    search_results = re.search(search_string, post_request_data)
    return search_results.group('secondary_key')


def md5_encoder(ctf_key) -> str:
    """Encode the string to md5sum"""
    md5_string = hashlib.md5(ctf_key.encode()).hexdigest()
    return md5_string


def main() -> None:
    """Execute the program"""
    first_page_response = get_initial_page()
    ctf_key = string_from_html(first_page_response)
    initial_request_md5_encoded = md5_encoder(ctf_key)
    post_request_data = post_request(headers(), initial_request_md5_encoded)
    new_ctf_key = string_from_html_secondary(post_request_data)
    post_md5_encoded = md5_encoder(new_ctf_key)
    post_request_data = post_request(headers(), post_md5_encoded)
    print(post_request_data)


if __name__ == '__main__':
    main()
