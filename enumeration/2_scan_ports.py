#!/usr/bin/env python3
"""Network scanner for scanning ports when nmap is not available.

A number of Linux boxes do not have nmap. When a box is exploited, you may need to
continue to run recon on the environment. Most Linux boxes have Python,
and hopefully python3. If not, you will need to clean up syntax here until the
Python2 version is available.
"""

import argparse
import socket

MAX_PORTS = 9001


class NetworkTools(object):
    """Create a network connection over tcp or udp."""

    def __init__(self, host, port, protocol):
        self.host = host[0]
        self.port = port
        self.max_ports = MAX_PORTS
        self.protocol = protocol
        self.connect = self.connection_protocol()

    def connection_protocol(self):
        """Create a connection through TCP or UDP."""
        if self.protocol == 'tcp':
            create_connection = socket.socket(
                socket.AF_INET, socket.SOCK_STREAM)
        if self.protocol == 'udp':
            create_connection = socket.socket(
                socket.AF_INET, socket.SOCK_DGRAM)
        return create_connection

    def scan_ports(self):
        """Start scanning ports. Check for port MAX_PORT or user input."""
        self.connect.settimeout(5)
        if self.port == MAX_PORTS:
            for port in range(0, self.max_ports):
                if self.connect.connect_ex((self.host, port)):
                    # print(f'Port {ports} is closed on host {self.host}.') # Debugging
                    pass
                else:
                    print 'Port {} is open.'.format(port)
        else:
            for port in self.port:
                if self.connect.connect_ex((self.host, int(port))):
                    # print(f'Port {port} is closed.')
                    pass
                else:
                    print 'Port {} is open.'.format(port)


def parse_arguments():
    """Accept user input then parse."""
    epilog = '[*] Port Scanner when nmap or netcat is not available.'
    parser = argparse.ArgumentParser(
        epilog=epilog, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument(
        'host', nargs=1, help='Provide an IP address for scanning.')

    subparsers = parser.add_subparsers(help='comand', dest='command')

    tcp_subparser = subparsers.add_parser(
        'tcp', help='"tcp" for tcp scanning.')
    tcp_subparser.add_argument(
        '-p', '--port', nargs='*', help='Provide ports you want to scan.\nDefault will scan all 1000 ports.\n[*] Example: -p 21 22')
    udp_subparser = subparsers.add_parser(
        'udp', help='"udp" for udp scanning.')
    udp_subparser.add_argument(
        '-p', '--port', nargs='*', help='Provide ports you want to scan.\nDefault will scan all 1000 ports.\n[*] Example: -p 21 22')

    args = parser.parse_args()
    return args


def main():
    """Program to find open ports."""
    args = parse_arguments()

    if args.port == None:
        args.port = MAX_PORTS
    create_connection = NetworkTools(args.host, args.port, args.command)
    create_connection.scan_ports()


if __name__ == '__main__':
    main()
