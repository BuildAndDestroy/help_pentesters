#!/usr/bin/env python
"""Standalone network script for host testing using python.

Long term we need to convert to python driven modules.
For now, subprocess is used.
"""

import argparse
import datetime
import socket
import subprocess


class NetworkUtils(object):
    """Networking class."""

    def __init__(self, eth_ports, ip_addresses, ports):
        self.eth_ports = eth_ports
        self.ip_addresses = ip_addresses
        self.ports = ports
        self.ping_command = ['ping', '-c', '1', '-I']
        self.traceroute_command = ['traceroute', '-i']
        self.tcp_dump_command = [
            'tcpdump', '-i', '-c', '10000', '-w']
        self.netcat_command_tcp = ['netcat', '-znv']
        self.netcat_command_udp = ['netcat', '-znvu']

    @property
    def _todays_date(self):
        """Obtain current date for tcpdump file name."""
        today = datetime.date.today()
        return today

    @property
    def _current_host(self):
        """Obtain hostname and return."""
        hostname = socket.gethostname()
        return hostname

    def ping_test(self):
        """Ping from local interface to an ip address"""
        for eth_port in self.eth_ports:
            for ip_address in self.ip_addresses:
                print('\n\r[*] Pinging from {} to {}'.format(
                    eth_port, ip_address))
                self.ping_command.append(eth_port)
                self.ping_command.append(ip_address)
                subprocess.call(self.ping_command)
                del self.ping_command[4:6]

    def traceroute_test(self):
        """Test a traceroute from local eth port to ip address."""
        for eth_port in self.eth_ports:
            for ip_address in self.ip_addresses:
                print '\n\r[*] Starting traceroute from {} to {}'.format(
                    eth_port, ip_address)
                self.traceroute_command.append(eth_port)
                self.traceroute_command.append(ip_address)
                subprocess.call(self.traceroute_command)
                del self.traceroute_command[2:4]

    def capture_tcpdump(self):
        """Collect .pcap file via tcpdump."""
        for eth_port in self.eth_ports:
            for ip_address in self.ip_addresses:
                pcap_file = '/home/os76/{}_{}_{}_{}.pcap'.format(
                    self._current_host, eth_port, ip_address, self._todays_date)
                self.tcp_dump_command.append(pcap_file)
                print '\r\n[*] Starting tcpdump on {}.\n\r[*] File located {}'.format(
                    eth_port, pcap_file)
                self.tcp_dump_command.insert(2, eth_port)
                subprocess.call(self.tcp_dump_command)
                del self.tcp_dump_command[2]
                del self.tcp_dump_command[-1]

    def netcat_test(self):
        """Using netcat, scan ports associated with given ip addresses."""
        for ip_address in self.ip_addresses:
            for port in self.ports:
                self.netcat_command_tcp.append(ip_address)
                self.netcat_command_tcp.append(port)
                subprocess.call(self.netcat_command_tcp)
                del self.netcat_command_tcp[2:4]


def parse_arguments():
    """Create argument parser with help menu."""
    url = '[*] Coming Soon'
    epilog = '\n\r{}\n\r'.format(url)
    parser = argparse.ArgumentParser(
        description=__doc__, epilog=epilog, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-i', '--interface', nargs='*',
                        help='Specify a local ethernet device to be used for testing.')
    parser.add_argument('-a', '--ip_address', nargs='*',
                        help='Specify an ipv4 address for testing.')
    parser.add_argument('-p', '--ports', nargs='*', help='Ports that will be used for testing.')

    parser.add_argument('-P', '--ping', action='store_true', help='Run a ping')
    parser.add_argument('-T', '--traceroute',
                        action='store_true', help='Run a traceroute')
    parser.add_argument('-D', '--tcpdump', action='store_true',
                        help='Create a .pcap file using tcpdump.')
    parser.add_argument('-N', '--netcat', action='store_true', help='Netcat scan an ip and port.')
    args = parser.parse_args()
    return args


def main():
    """Execute program."""
    args = parse_arguments()

    build_network = NetworkUtils(args.interface, args.ip_address, args.ports)

    if args.ping:
        build_network.ping_test()
    if args.traceroute:
        build_network.traceroute_test()
    if args.tcpdump:
        build_network.capture_tcpdump()
    if args.netcat:
        build_network.netcat_test()


    if not args.ping and not args.traceroute and not args.tcpdump and not args.netcat:
        print '[*] Example command:\n\r    ./network_toolkit.py -i eth2 eth3 -I <ipv4> -PTDN'


if __name__ == '__main__':
    main()

