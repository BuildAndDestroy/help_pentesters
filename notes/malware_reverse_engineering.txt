[*] What is Reverse Engineering (RE)?
	Understand the design
	Observe state of an object
	Determine how an object functions.
    So what is malware reverse engineering?
	Reveal malware design
	Identify malware code and architecture
	Catalogue the type of malware artifacts
    Malware Analysis
	Analyze Malware and how it works
	Reverse engineering could be a thing but not always
	Sometimes we just need to see how the malware works - workflow and processes
    Process Commonalities
	Static Analysis
		Object analysis without execution
	Dynamic Analysis
		Object with execution
    Why the hell are we analyzing malware? What's the benefit?
	TL;DR - Money
	Malware is always trending and the trend is growing.
	Knowing behavior, you can protect ecosystem with known tools or build tools.
    Reporting
	Document data collected - Why?
		Library of past and current issues or events
		Help analysts or upper management review findings
	Know your audience
		Not everyone technical
		High level and low level might not hit requirements.
	Management may dictate what's needed
		MY thoughts - maybe an executive review and a detailed view may help.

[*] Malware analysis tools
	Types of tools:
		Binary
		Disassemblers
		Decompilers
		Debuggers
		Monitoring Tools
	Binaries:
		First few bytes should be "magic headers"
			Example "PDF" or "MZ header"
	Disassemblers and Decompilers
		Disassemblers read low level assembly code of program
		Tools:
			Windows - IDA
			Linux - Ghidra
	Debuggers
		Allows analyst to navigate through code, line by line, as program is executed.
		Usually ran in a closed environment, especially malware.
	Monitoring Tools
		Monitors system, such as File system, Registry, Memory, Network, CPU and Processes.

		
[*] Malware handling
	Check the file hash
	Use protection, store the file in a zip file for example.
		This helps to avoid accidental execution and nuking your machine or lab.
		Once moved, you can unzip the file and recheck the hash
	Rename the file extension.
	Isolate the lab and disconnect network
		Avoid sharing networks to avoid anything getting out.
		Isolate lab so if something does execute, other machines are not compromised

[*] Malware Lab
	Host
	Guests (virtual machines)
		Windows 10
		REMnux Linux OS - Malware analysis linux OS
	*****SNAPSHOTS******
		Take snapshots before you investigate. A clean slate is nice.

[*] Operating Systems
	Know your environment that malware is going to go after.
	Windows:
		File System
			Data in format of files and directories
			File allocation table (FAT)
			New Technology File System (NTFS)
			ExFAT (Extensible File System)
			Resilient File System (ReFS)
			Linux (Newer file systems for embedded linux)
			Drectory Paths
			Filename
			File sizes
			Time, Date, Access stamps
			File Permissions
		Memory
			Portable Executable Format (PE)
			CFF Explorer
		Registry

[*] WinAPI and Registry
	Library files - common functions and api's that are shared and reused by other programs
	Static libraries - compiled into the program
	Dynamic libraries - linked to the .exe and available at runtime
		Windows Dynami Libraries, also known as DLL's.
	Common Windows APIs to remember:
		WriteProcessMemory
		VirtualProtect
		CreateProcessInternalW
		WriteFile
		NtMapViewOfSection
		RegCreateKey
		CreateRemoteThread
		RegDeleteKey
		ReadFile
		StartService
		SetFilePointer
		NtCreateSection
		CreateMutex
		CreateThread
		VirtualAlloc
		RegSetValue
		OpenSCManager
		CreateFile
		LoadLibrary
		DeleteFile
		CloseFile
		ExitProcess
		OpenMutex
		GetThreadContext
		ChangeServiceConfig
		CreateProcess
		OpenService
		SetThreadContext
		TerminateProcess
		GetProcAddress
		CreateService
	Windows Registry - Database of settings for OS Applications
		apps
			userinterfaces
			Kernel
			driveers
		new key with settings is created
			hive files - registry key and values, "files".
		Expect malware to be found in the registry for persistence.

[*] Malware components and behaviors
	Malware acts like regular software
	Expect payload but with Different components:
		Communications - listeners, C2C, exfiltrate data, 2nd stage payloads
			This has become difficult recently - stealth like encrypted comms
			used to be http, irc, ftp, etc.
		stealth - file altercations, code injection, process hollowing, rootkits
		Packers - files packed/zipped/whatever to obfuscate the payload
		Persistence - use OS specifics to always run, like; Run keys, schedules tasks, Run folder, Windows Services
		Armouring - hinder analysis like anti-debugging, sandbox detections, timing attacks, network evasion, vm detection
		Propogation - spread itself to other devices. Credential stealing, nmaps, Recon, exploit kits (think, "WannaCry" SMB worm)
		Encoders
		chained payloads
		adware
		ransomware
	Malware Distribution techniques
		Physical - USB Drives
		Web Downloads
		Email
		Open RDP ports
		Open SSH ports

[*] x86 and x64 bit systems
	Numbering systems
		Binary
		    0 and 1 (base 2)
		    x32 architecture - piece of data is grouped in 32 blocks. Each block is 1 bit - 0 or 1
			Combine the 32 bits, you have a piece of data. A bit is combined blocks of 1's and 0's.
		    x64 architecture - 	piece of data grouped in 64 blocks.
		    Collection of blocks:
			    4 bits is a nibble
			    8 bits is a byte
		    	    32 bits is 4 bytes
		    Conversion of 1's and 0's to and from English
		    chucnks of data usable, we use hex!
		Hex Numbering
			Base 16 numbering system composed of 16 values, 0-9
				A = 10
				B = 11
				C = 12
				D = 13
				E = 14
				F = 15
			ASCII Table
				standardized way to convert characters to decimal numbers
			Decimal Conversion
				Dividend     Divisor     Quotient  Remainder
				   15    /     2     =     7          1

	Data Types -   |-----55-----|   "Hex"
			0101    0101   <- 1 Byte
		       |-5-| - |-5-|
		Byte
		Word
		DWORD
		QWord
		Double Qword

[*] Assembly
	IDA - reverse engineering malware
		Column 1 - Address in Hex
		Column 2 - Machine code / Opt code
		Column 3 - Instruction numonic - contains arguments like rbp, rsp
			Remember, reading the arguments, read right to lift. So data in rsp register to rbp register.

[*] Code Analysis Process
	Hash file(s) and determine file format
	Analyze strings
	Identify packers or obfuscation
	PE Header Analysis
	Code Analysis (RE)

[*] Registry reminders:
	EBP - Base Pointer
	ESP - Always points to the top of the stack
	Reading registers - read them from right to left, top to bottom
	JNZ - Jump Not Zero. Usually seen in if/else statements
	MOV - Move data between registers


[*] Packers
	Pieces of software that compresses an executable
	Packers make files smaller - bypass perimeter devices
	Packers obfucate content and hide true intent of executable
	UPX
		UPX0
		UPX1
		UPX2
	PECompact
		pec
		pec
		pec2
	FSG
		FSG!
	ASPack
		.adata
		.aspack
	WinUPack
		PS
	YodaCrypt
		.yP
		.y0da
	Themida
		.themida
[*] Cryptors
	Alter malware - obfuscation
		"encryption lite"
	Bypass antivirus by obfuscatio
    Protectors
	Obfuscation by adding junk code or making code hard to read
    Installers
	Offer malware authoris a GUI interface to bundle malicious code to be installed on host.


[*] Identify Packers
	PE file through tool that scans signatured
	Analyze PE section names
	Look for unpacker stub
	Look for small PE import table
	Examine PE size and strings

[*] Unpacking
	Dynamically unpack your sample in a lab
		Cuckoo tool example
	Use a commercially available unpacker
	Unpack your sample using generic unpacker
	Manually unpack the malware with tools, scripts, debugger

[*] Tools:
	Windows:
		IDA
		CFF Explorer
		PEView
		PEBear
		exeinfope
		peid
		peexplorer
		Detect It Easy
		Python
		Process Hacker
	Linux:
		Ghidra
		Radare2
		Hopper

