AWS

    Lower cost than on prem
    Secure virtual environment
    No upfront cost

IAM

[*] Quick video:
    https://www.youtube.com/watch?v=GjVFf83dcE8

[*] What is AWS Security?

    [*] IAM - Identity and Access Management
        Before AWS - People shared creds over the phone or internet.
            Eaves dropping/MITM stealing creds
        After AWS
             - Tools like Slack or other cloud apps, you share creds or confidential data securely
                Don't share creds through apps -__-
                Don't share creds lol
        IAM is a web service for securely controlling access to AWS resources.
        Admin has access, sets permissions to AWS resources.
        6 elements
            Principal
                User or Role
                Entity that can take action on AWS resource
            Authentication
                Process of confirming identity of principle (who) is trying to access AWS product
                To authenticate to API or CLI, provide creds/keys to obtain access
            Request
                When principle (who) attempts to access AWS console, API, or CLI, they send a request to start a session.
            Authorization
                IAM uses the information from the request to check for matching policies. Allow Access or Deny Access.
                Evaluation logic is triggered here for access.
                Default, root user has access to everything.
                    Create users -__-
            Actions
                Once authentication and authorization verified, AWS approves.
                Using Actions, view, create, edit, and delete resources is granted as long as your perms match authorization.
            Resources
                A set of Actions are performed on Resources for your AWS account.
                If you are not authorized to make a request, the action will be denied.
                Example: delete IAM role and request access on EC2 instance for that role - Denied.

        [*] Compenents of IAM
            Users - Think "Linux" Users
                Securely manage access to AWS with an IAM user.
                Each user is associated with one AWS account.
                Default - User is not allowed to do anything in AWS.
                IAM user is not always a person - can be identity.
            Groups
                A collection of IAM users.
                Use IAM groups to specify permissions for multiple users.
                    Doing this will allow you to give permissions to a group of users. Think "Linux" groups or AD groups.
                Users belong in groups.
                    Groups cannot be in groups.
            Policies
                Sets permissions and controls access to AWS resources.
                Policies are stored in AWS as JSON documents.
                Permissions specify who has access to what resources and what actions can be performed.
                    Think "Kubernetes RBAC"
                EXAMPLE:
                    User: Paul 
                    Action: get/put objects in S3
                    Resource: Bucket="*" // Means Paul has to access all the buckets
                    When: Until 03/02/2020
                    Whether: Allow // Give him access "Denied" means boot him.
                        { //  Example read only Policy
                        "Version": "2020-10-17",
                        "Id": "S3-Account-Permissions",
                        "Statement": [{
                            "Sid": "AddPublicReadPermissions",
                            "Effect": "Allow",
                            "Principle": "*",
                            "Action": "s3:*",
                            "Resource": ["arn:AWS:s3:::bucket/*"]
                            }]
                        }
                [*] Types of Policies
                    Managed Policies
                        Default policy attached to multiple entities (Users, Groups, Roles) in AWS account
                    Inline Polices
                        Create and Manage your own policy
                            Embedded into single entity (Users, Groups, Roles)
            Roles
                Set of permissions that define what actions are allowed/denied by entity in AWS console.
                Similar to a user. NOT A USER
                    Roles are temporary
                        Temp creds
                    Users are permanent
                Accessed by entity - individual or AWS service.
                EXAMPLE:
                    Create role and give access to s3 "file" bucket.
                    With the role, a user launches EC2 instance
                    From the instance, application retrieves role creds.
                    Using role creds, application gets s3 files.

        Features of IAM
            Shared Access to AWS account
            Granular Permissions
            Secure Access to AWS Resources for apps running on EC2
            Multi-factor Authentication (MFA)
            Identity Federation
                Facebook, Google Authenticator, OAuth(?)
            Free to Use
            PCI DSS Compliance
            Password Policy

    [*] KMS
    [*] Cognito
    [*] WAF
